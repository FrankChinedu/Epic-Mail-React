// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sign in should render sign in page 1`] = `<signinComponent />`;

exports[`Sign in should render signup with store 1`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Connect(Signin)
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Signin
        authError={null}
        onSignIn={[Function]}
        store={
          Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
        user={Array []}
      >
        <main
          className="flex justify-content-ctr"
        >
          <div
            className="col-5 mt-5 form-cover"
          >
            <h3
              className="center-text"
            >
              Sign In
            </h3>
            <Formik
              enableReinitialize={false}
              initialValues={
                Object {
                  "email": "",
                  "password": "",
                }
              }
              isInitialValid={false}
              onSubmit={[Function]}
              validateOnBlur={true}
              validateOnChange={true}
              validationSchema={
                ObjectSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [],
                  "_defaultDefault": [Function],
                  "_deps": Array [],
                  "_excludedEdges": Array [],
                  "_exclusive": Object {},
                  "_mutate": undefined,
                  "_nodes": Array [
                    "password",
                    "email",
                  ],
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "object",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "fields": Object {
                    "email": StringSchema {
                      "_blacklist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_conditions": Array [],
                      "_deps": Array [],
                      "_exclusive": Object {
                        "required": true,
                        "undefined": false,
                      },
                      "_mutate": undefined,
                      "_options": Object {
                        "abortEarly": true,
                        "recursive": true,
                      },
                      "_type": "string",
                      "_typeError": [Function],
                      "_whitelist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "tests": Array [
                        [Function],
                        [Function],
                      ],
                      "transforms": Array [
                        [Function],
                      ],
                    },
                    "password": StringSchema {
                      "_blacklist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_conditions": Array [],
                      "_deps": Array [],
                      "_exclusive": Object {
                        "min": true,
                        "required": true,
                      },
                      "_mutate": undefined,
                      "_options": Object {
                        "abortEarly": true,
                        "recursive": true,
                      },
                      "_type": "string",
                      "_typeError": [Function],
                      "_whitelist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "tests": Array [
                        [Function],
                        [Function],
                      ],
                      "transforms": Array [
                        [Function],
                      ],
                    },
                  },
                  "tests": Array [],
                  "transforms": Array [
                    [Function],
                  ],
                }
              }
            >
              <form
                onSubmit={[Function]}
              >
                <div
                  className="mt-25"
                >
                  <label
                    htmlFor="email"
                  >
                    Email
                  </label>
                  <input
                    className="form-control mt-5"
                    name="email"
                    onBlur={[Function]}
                    onChange={[Function]}
                    placeholder="email"
                    type="email"
                    value=""
                  />
                </div>
                <div
                  className="mt-25"
                >
                  <label
                    htmlFor="password"
                  >
                    Password
                  </label>
                  <input
                    autoComplete="true"
                    className="form-control mt-5"
                    name="password"
                    onBlur={[Function]}
                    onChange={[Function]}
                    type="password"
                    value=""
                  />
                </div>
                <div
                  className="center-text mt-25"
                />
                <div
                  className="mt-25 center-text"
                >
                  <button
                    className="mt-25 btn"
                    disabled={false}
                    type="submit"
                  >
                    Sign in
                  </button>
                </div>
              </form>
            </Formik>
          </div>
        </main>
      </Signin>
    </Connect(Signin)>
  </Router>
</BrowserRouter>
`;
